import{w as O}from"./index.9f5fd596.js";import{g as q}from"./tables.store.38b25df8.js";import{p as S}from"./projectCharter.store.c4336a1c.js";import{E as I}from"./scheduler.d96d3362.js";class B{constructor(){this.apiKey="",this.mediaRecorder=null,this.audioChunks=[],this.playbackAudio=null}setApiKey(e){console.log("new api key was set:",e),this.apiKey=e}async record(){if(this.apiKey=="")throw new Error("Api key not set");const e=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaRecorder=new MediaRecorder(e),this.mediaRecorder.ondataavailable=s=>{this.audioChunks.push(s.data)};let n=new Promise((s,t)=>{this.mediaRecorder.onstop=async()=>{s()}});return this.mediaRecorder.start(),n}async transcribe(){if(this.apiKey=="")throw new Error("Api key not set");const e=new Blob(this.audioChunks,{type:"audio/wav"}),n=new File([e],"recording.wav"),s=new FormData;s.append("file",n),s.append("model","whisper-1");const u=(await(await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`},body:s})).json()).text;return console.log("Transkribierter Text:",u),u}stopRecording(){this.mediaRecorder&&(this.mediaRecorder.stop(),this.audioChunks=[])}stopPlayback(){if(console.log("stopping audio playback"),this.playbackAudio){this.playbackAudio.pause();const e=this.playbackAudio;this.playbackAudio=null,e.onended&&e.onended()}}stop(){this.stopRecording()}async sendToGPT(e,n){if(this.apiKey=="")throw new Error("Api key not set");const s={model:"gpt-4o-mini",messages:e,tools:n};return(await(await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(s)})).json()).choices[0]}async webSearch(e){if(this.apiKey=="")throw new Error("Api key not set");console.log("Performing web search for:",e);const s={model:"gpt-4o-search-preview",web_search_options:{},messages:[{role:"system",content:"You are a helpful assistant that searches the web for information. Provide concise, accurate information based on search results."},{role:"user",content:e}]},a=await(await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(s)})).json();if(a.error)throw console.error("Web search API error:",a.error),new Error(`Web search failed: ${a.error.message}`);return a.choices[0].message.content}async speak(e){if(this.apiKey=="")throw new Error("Api key not set");const s=await(await fetch("https://api.openai.com/v1/audio/speech",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({input:e,model:"tts-1",voice:"shimmer"})})).blob(),t=URL.createObjectURL(s),a=new Audio(t);return this.playbackAudio=a,new Promise(u=>{a.onended=()=>{console.log("audio playback ended, revoking URL"),URL.revokeObjectURL(t),this.playbackAudio=null,u("completed")},a.addEventListener("canplaythrough",()=>{a.play().catch(c=>{console.error("Error playing audio:",c),this.playbackAudio=null,u("error")})})})}async generateTasks(e,n){console.log("Starting generate Tasks");let s=JSON.stringify(n);e.push({role:"developer",content:`This is the current task table as JSON (Array containing the rows of the table, starting with the headings):
`+s}),e.push({role:"developer",content:"Update the given task table based on the information of the last messages of the conversation. The headings should be the same. Answer just with an JSON string without any other text. Your answer must be parsable with JSON.parse(), so not even Markdown code blocks should be included."});let t=await this.sendToGPT(e);return JSON.parse(t)}async generateRessources(e,n){}async splitTask(e,n){console.log("Starting split task for ID:",e);const s=[{role:"developer",content:"You are a helpful assistant for Project Management integrated into a Project Management Software. Your task is to split a given task into 3-7 subtasks."},{role:"developer",content:"The _level column is used to represent the hierarchy of the tasks. The subtasks should have a level one higher than the parent task. It can be included directly in the task data."},{role:"developer",content:"The Id column is used to identify tasks. Generate unique IDs for the subtasks by appending .1, .2, etc. to the parent task ID."},{role:"developer",content:"Min, Likely, and Max are estimated hours of effort to complete the task. The sum of the subtasks should approximately equal the parent task's estimates."},{role:"developer",content:"Resources defines which resources can be used to complete the task. Predecessors is a list of Ids separated by commas which must be left empty if none is present. Progress is an integer between 0 and 100."}],t=n.getHeader();console.log("Table headers:",t.join(","));const a=n.getIdColumnName(),u=t.indexOf(a),c=t.indexOf("_level");let p=JSON.stringify(n);s.push({role:"developer",content:`This is the current task table as JSON (Array containing the rows of the table, starting with the headings):
`+p});const r=n.getRow(e),i=n.getRowLevel(e);if(!r||r.length===0)throw new Error(`Task with ID ${e} not found`);let d=1;for(let y=0;y<t.length;y++)if(t[y]==="Task"||t[y]==="Name"){d=y;break}const l=t.indexOf("Min"),g=t.indexOf("Likely"),m=t.indexOf("Max"),k=t.indexOf("Resources"),$=t.includes("Start"),T=t.includes("Deadline");let h=`Split the following task into 3-7 subtasks: Task ID: ${e}, Name: ${r[d]}, `;l>=0&&g>=0&&m>=0&&(h+=`Estimates (Min/Likely/Max): ${r[l]}/${r[g]}/${r[m]}, `),k>=0&&(h+=`Resources: ${r[k]||"None"}, `),h+=`Level: ${i}.`,h+=`
The subtasks should be at level ${i+1}.`,h+=`
Answer with a JSON array of subtask rows, with values in the same order as the headers.`,h+=`
Make sure to include the correct _level value (${i+1}) for each subtask.`,h+=`
Do not include the parent task in your response.`,h+=`
Do not include table headers in your response, only include the actual subtask rows.`,h+=`
Make sure the IDs follow the pattern ${e}.1, ${e}.2, etc.`,h+=`
Ensure the sum of estimates is approximately equal to the parent task.`,h+=`
The subtasks will be added directly below the parent task in the table.`,($||T)&&(h+=`
For the Start and Deadline columns, use the format YYYY-MM-DD or leave empty if not applicable.`),h+=`
Your answer must be parsable with JSON.parse().`,s.push({role:"developer",content:h});let j=await this.sendToGPT(s);console.log("Split task response:",j);try{let y=j.message.content;const M=y.match(/\[\s*\[.*\]\s*\]/s);if(M)y=M[0];else if(y.includes("```json")){const b=y.match(/```json\s*([\s\S]*?)\s*```/);b&&b[1]&&(y=b[1].trim())}let w;try{w=JSON.parse(y)}catch(b){console.error("Error parsing split task response:",b);const E=y.replace(/\[\s*([^[\]]*?)\s*(?!\])/g,"[$1]").replace(/,\s*(\]|\})/g,"$1").replace(/[^[\]{}:,0-9."'\s-]/g,"");try{w=JSON.parse(E),console.log("Successfully parsed JSON after cleanup")}catch{throw new Error(`Failed to parse JSON: ${b.message}`)}}if(!Array.isArray(w)||w.length===0)throw new Error("Invalid subtasks format: not an array or empty array");if(w.length>0&&Array.isArray(w[0])&&t.some(b=>w[0].includes(b))&&(console.log("Detected headers in the first row, skipping it"),w=w.slice(1),w.length===0))throw new Error("No valid subtasks found after removing headers");return w.forEach((b,E)=>{if(!Array.isArray(b))throw new Error(`Invalid subtask format at index ${E}: not an array`);b.forEach((N,A)=>{c>=0&&A===c&&typeof N!="number"&&(b[A]=parseInt(N,10),isNaN(b[A])&&(b[A]=i+1)),A===u&&typeof N!="string"&&(b[A]=String(N))})}),w}catch(y){throw console.error("Error parsing split task response:",y),new Error("Failed to parse subtasks from assistant response: "+y.message)}}}const J=O([]);function W(o){J.update(e=>[...e,{id:Date.now(),text:o,timestamp:new Date().toISOString()}])}function G(o){J.update(e=>e.filter(n=>n.id!==o))}function L(o,e){const n=[];let s=!0;const t=r=>{n.push(r),s=!1};function a(r,i){if(!r||typeof r!="object")return r;if(Array.isArray(r)&&i.type==="array"&&i.items)return r.map(d=>a(d,i.items));if(!Array.isArray(r)&&i.type==="object"&&i.properties){const d={...r};for(const[l,g]of Object.entries(i.properties))d[l]!==void 0&&(d[l]=a(d[l],g));return d}return i.type==="string"&&typeof r=="number"?String(r):Array.isArray(r)&&i.items&&i.items.type==="array"?r.map(d=>Array.isArray(d)&&i.items.items&&i.items.items.type==="string"?d.map(l=>typeof l=="number"?String(l):l):d):r}function u(r,i,d){return i==="object"?typeof r=="object"&&r!==null&&!Array.isArray(r):i==="array"?Array.isArray(r):i==="number"?typeof r=="number"&&!isNaN(r):i==="boolean"?typeof r=="boolean":i==="string"?typeof r=="string":i==="null"?r===null:!0}function c(r,i,d=""){if(i.type&&!u(r,i.type)){t(`${d||"value"} should be of type ${i.type}`);return}if(i.enum&&!i.enum.includes(r)&&t(`${d||"value"} should be one of: ${i.enum.join(", ")}`),i.format==="email"&&i.type==="string"&&(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(r)||t(`${d||"value"} should be a valid email address`)),i.pattern&&i.type==="string"&&(new RegExp(i.pattern).test(r)||t(`${d||"value"} should match pattern: ${i.pattern}`)),i.type==="object"&&i.required)for(const l of i.required)r[l]===void 0&&t(`${d?`${d}.${l}`:l} is required`);if(i.type==="object"&&i.properties){for(const[l,g]of Object.entries(i.properties))r[l]!==void 0&&c(r[l],g,d?`${d}.${l}`:l);if(i.additionalProperties===!1){const l=Object.keys(i.properties);for(const g of Object.keys(r))l.includes(g)||t(`${d?`${d}.${g}`:g} is not allowed`)}}if(i.type==="array"&&i.items)for(let l=0;l<r.length;l++)c(r[l],i.items,`${d}[${l}]`);i.type==="array"&&(i.minItems!==void 0&&r.length<i.minItems&&t(`${d||"array"} should have at least ${i.minItems} items`),i.maxItems!==void 0&&r.length>i.maxItems&&t(`${d||"array"} should have at most ${i.maxItems} items`)),i.oneOf&&i.oneOf.filter(g=>L(r,g).valid).length!==1&&t(`${d||"value"} should match exactly one schema in oneOf`)}const p=a(o,e);return c(p,e),{valid:s,errors:n}}function H(o){return o&&o.type==="function"&&o.function&&o.function.parameters?o.function.parameters:null}function V(o,e){return!o||!Array.isArray(o)?null:o.find(n=>n.type==="function"&&n.function&&n.function.name===e)||null}function z(o,e){if(!o||!o.function||!o.function.name)return{valid:!1,errors:["Invalid tool call structure"]};const n=V(e,o.function.name);if(!n)return{valid:!1,errors:[`Tool not found: ${o.function.name}`]};const s=H(n);if(!s)return{valid:!1,errors:[`No schema found for tool: ${o.function.name}`]};let t;try{t=JSON.parse(o.function.arguments),o.function.name==="operate_on_table"&&t.content&&(t.content=t.content.map(u=>Array.isArray(u)&&u.length>0&&typeof u[0]=="number"?[String(u[0]),...u.slice(1)]:u))}catch(u){return{valid:!1,errors:[`Invalid JSON in arguments: ${u.message}`]}}return L(t,s)}function Q(o){const e={};if(!o||typeof o.getHeader!="function")return e;const n=o.getHeader();if(!n||!Array.isArray(n))return e;if(["Id","Name","Min","Likely","Max","Resources","Predecessors","Progress","Start","Deadline","_level"].forEach(t=>{let a=n.indexOf(t);a===-1&&(a=n.findIndex(u=>u.toLowerCase()===t.toLowerCase())),a!==-1&&(e[t]=a)}),!e.Id&&typeof o.getIdColumnName=="function"){const t=o.getIdColumnName();let a=n.indexOf(t);a===-1&&(a=n.findIndex(u=>u.toLowerCase()===t.toLowerCase())),a!==-1&&(e.Id=a)}return e}function X(o,e,n={}){const s=[];if(!o||!Array.isArray(o)||o.length===0)return{valid:!0,errors:[]};if(!e)return console.error("Table object is null or undefined"),{valid:!0,errors:[]};const t=n.Predecessors!==void 0?n.Predecessors:6,a=[];if(typeof e.getAllIds=="function")a.push(...e.getAllIds());else if(typeof e.getAllRows=="function"){const u=e.getAllRows(),c=n.Id!==void 0?n.Id:e.getIdColumnIndex?e.getIdColumnIndex():0;a.push(...u.map(p=>p[c]))}for(const u of o){if(u.length<=t||!u[t])continue;const c=u[t].split(",").map(p=>p.trim()).filter(p=>p!=="");for(const p of c)a.includes(p)||s.push(`Predecessor ID '${p}' does not exist in the table`)}return{valid:s.length===0,errors:s}}function Z(o,e,n={}){if(!o||!Array.isArray(o)||o.length===0)return{valid:!0,errors:[]};if(!e||!Array.isArray(e)||e.length===0)return console.warn("No valid resources provided - skipping resource validation"),{valid:!0,errors:[]};const s=n.Resources!==void 0?n.Resources:5,t=[];for(const a of o){if(a.length<=s||!a[s])continue;const u=a[s].split(",").map(c=>c.trim()).filter(c=>c!=="");for(const c of u){const p=c.split("&").map(r=>r.trim());for(const r of p)e.includes(r)||t.push(`Resource '${r}' does not exist in the resource list`)}}return{valid:t.length===0,errors:t}}function ee(o,e={}){const n=[];if(!o||!Array.isArray(o)||o.length===0)return{valid:!0,errors:[]};const s=e.Min!==void 0?e.Min:2,t=e.Likely!==void 0?e.Likely:3,a=e.Max!==void 0?e.Max:4,u=Math.max(s,t,a);for(let c=0;c<o.length;c++){const p=o[c];if(p.length<=u||!p[s]||!p[t]||!p[a])continue;const r=parseFloat(p[s]),i=parseFloat(p[t]),d=parseFloat(p[a]);if(isNaN(r)||isNaN(i)||isNaN(d)){console.warn(`Row ${c+1}: Min, Likely, and Max should be valid numbers. Got: ${p[s]}, ${p[t]}, ${p[a]}`);continue}r>i&&n.push(`Row ${c+1}: Min (${r}) should not be greater than Likely (${i})`),i>d&&n.push(`Row ${c+1}: Likely (${i}) should not be greater than Max (${d})`)}return{valid:n.length===0,errors:n}}function te(o,e={}){const n=[];if(!o||!Array.isArray(o)||o.length===0)return{valid:!0,errors:[]};const s=e.Start!==void 0?e.Start:8,t=e.Deadline!==void 0?e.Deadline:9,a=Math.max(s,t);for(let u=0;u<o.length;u++){const c=o[u];if(c.length<=a||(!c[s]||c[s]===""||c[s]==="0")&&(!c[t]||c[t]===""||c[t]==="0"))continue;const p=/^\d{4}-\d{2}-\d{2}$/;if(c[s]&&c[s]!==""&&c[s]!=="0"&&!p.test(c[s])){console.warn(`Row ${u+1}: Start date '${c[s]}' is not in YYYY-MM-DD format`);continue}if(c[t]&&c[t]!==""&&c[t]!=="0"&&!p.test(c[t])){console.warn(`Row ${u+1}: Deadline date '${c[t]}' is not in YYYY-MM-DD format`);continue}if(c[s]&&c[s]!==""&&c[s]!=="0"&&c[t]&&c[t]!==""&&c[t]!=="0"&&p.test(c[s])&&p.test(c[t])){const r=new Date(c[s]),i=new Date(c[t]);r>i&&n.push(`Row ${u+1}: Start date (${c[s]}) should not be after Deadline date (${c[t]})`)}}return{valid:n.length===0,errors:n}}function re(o,e={}){const n=[];if(!o||!Array.isArray(o)||o.length===0)return{valid:!0,errors:[]};const s=e.Progress!==void 0?e.Progress:7;for(let t=0;t<o.length;t++){const a=o[t];if(a.length<=s||a[s]===""||a[s]==="0")continue;const u=parseInt(a[s],10);if(isNaN(u)){console.warn(`Row ${t+1}: Progress should be a valid number. Got: ${a[s]}`);continue}else(u<0||u>100)&&n.push(`Row ${t+1}: Progress (${u}) must be between 0 and 100`)}return{valid:n.length===0,errors:n}}var _=new B,se=50;const x=[{role:"developer",content:"You are a helpful assistant for Project Management integrated into a Project Management Software. Keep your answers very short. Ask questions if something important. Make useful assumptions when something is undefined."},{role:"developer",content:"Ensure that a complete project charter exists. If not, suggest to the user to complete it first, but accept to proceed if the user insists."},{role:"developer",content:"In general, make useful assumptions, but also ask questions to clarify, get more details regarding a recent action or to define the fundamentals (e.g. project charter)."},{role:"developer",content:"Use tools to plan the project. At least every "+(se-2)+" tool roundtrips you have to respond with a message to the user."},{role:"developer",content:"Dates must use the format YYYY-MM-DD."},{role:"developer",content:"You can add or remove AI suggestions for project improvement. Use the manage_suggestions tool to do so, at regular intervals."},{role:"developer",content:"Respond to the user in its prefered language. The browser tells us, that the user preferes the following language: "+(navigator.language||navigator.userLanguage)},{role:"developer",content:"The _level column is used to represent the hierarchy of the tasks. It is not visible to the user. If the previous task has the same level, they are siblings, if the previous task has a lower level it is the parent of the current task and so on."},{role:"developer",content:"When creating sub-tasks make sure to place them close to their siblings and set the correct _level value."},{role:"developer",content:"The Id column is visible to the user and must be used to identify tasks. The Start and Deadline columns are visible to the user and are completely optional (should be left empty if not known, but must be part of the table). They can be used to se fixed dates on tasks, but that should gennerally be avoided."}],f=O({isRecording:!1,isThinking:!1,isSpeaking:!1,status:"idle"}),oe=O();function ne(){const{subscribe:o,set:e,update:n}=O(x);return{subscribe:o,set:s=>{const t=Array.isArray(s)?s:x;e(t)},update:s=>{n(t=>{const a=s(t);return Array.isArray(a)?a:x})},reset:()=>e(x)}}const v=ne();let C=x;v.subscribe(o=>{C=Array.isArray(o)?o:x});function P(){return C}let R=q("tasks"),F;R.subscribe(o=>F=o);let D=q("resources"),Y;D.subscribe(o=>Y=o);const U=[{type:"function",strict:!0,function:{name:"update_project_charter",description:"Update the project charter with new information or assumptions",parameters:{type:"object",properties:{field:{type:"string",description:"The field to update in the project charter",enum:["projectName","projectDescription","projectManager","startDate","endDate","objectives","stakeholders","scope","assumptions","constraints","risks","budget","success_criteria","key_deliverables"]},value:{oneOf:[{type:"string",description:"Value for single-value fields like projectName, description, dates, etc."},{type:"array",description:"Value for array fields like objectives, stakeholders, etc.",items:{type:"string"}},{type:"object",description:"Value for object fields like scope and budget",properties:{inScope:{type:"array",items:{type:"string"}},outOfScope:{type:"array",items:{type:"string"}},amount:{type:"number"},currency:{type:"string"}}}]},is_assumption:{type:"boolean",description:"Whether this value is an assumption made by the assistant (true) or information provided by the user (false)"}},required:["field","value","is_assumption"],additionalProperties:!1}}},{type:"function",strict:!0,function:{name:"operate_on_table",description:"Perform operations on the tasks or resources table. For tasks table, content must match the table format. For resources table, content must start with Date column followed by resource availability hours.",parameters:{type:"object",properties:{table_name:{type:"string",description:"Name of the table to be operated upon",enum:["tasks","resources"]},operation:{type:"string",description:"What operation should be performed on the table. For add_rows and replace_rows, content array is required. For delete_rows, ids array is required.",enum:["add_rows","replace_rows","delete_rows","clear_table","add_or_replace_columns"]},ids:{type:"array",description:"Array of unique identifiers for the rows/columns to be affected. For add_or_replace_columns, these are the column header names. Required for delete_rows operation.",items:{type:"string"}},content:{type:"array",description:"Array of row/column contents. For rows, each item must be an array matching the table format. For columns, each item must be an array starting with the column name followed by values. Required for add_rows and replace_rows operations.",items:{type:"array",items:{type:"string"},minItems:1}},after_id:{type:"string",description:"For add_rows operation, specifies the ID of the row after which to add the new rows. If not provided, rows will be added at the end. When adding subtasks, this should be set to the parent task ID to ensure subtasks appear directly below their parent."},validate_format:{type:"object",description:"Validation rules for the content format",properties:{tasks:{type:"object",properties:{columns:{type:"array",items:{type:"string",enum:["_level","Id","Task","Min","Likely","Max","Resources","Predecessors","Progress","Start","Deadline"]},minItems:11,maxItems:11},validators:{type:"object",properties:{_level:{type:"string",pattern:"^\\d+$"},Id:{type:"string"},Task:{type:"string"},Min:{type:"string",pattern:"^\\d+(\\.\\d+)?$"},Likely:{type:"string",pattern:"^\\d+(\\.\\d+)?$"},Max:{type:"string",pattern:"^\\d+(\\.\\d+)?$"},Resources:{type:"string"},Predecessors:{type:"string"},Progress:{type:"string",pattern:"^\\d+$"},Start:{type:"string",pattern:"^(\\d{4}-\\d{2}-\\d{2})?$"},Deadline:{type:"string",pattern:"^(\\d{4}-\\d{2}-\\d{2})?$"}}}}},resources:{type:"object",properties:{date_format:{type:"string",pattern:"^\\d{4}-\\d{2}-\\d{2}$"},hours_format:{type:"string",pattern:"^\\d+(\\.\\d+)?$"}}}}}},required:["table_name","operation"],additionalProperties:!1}}},{type:"function",strict:!0,function:{name:"rename_heading",description:"Rename a single column heading in a table",parameters:{type:"object",properties:{table_name:{type:"string",description:"Name of the table to be operated upon",enum:["tasks","resources"]},old_heading:{type:"string",description:"The current name of the heading to be renamed"},new_heading:{type:"string",description:"The new name for the heading"}},required:["table_name","old_heading","new_heading"],additionalProperties:!1}}},{type:"function",strict:!0,function:{name:"manage_suggestions",description:"Add or remove AI suggestions for project improvement. Use this to provide dynamic suggestions based on the project state and conversation context.",parameters:{type:"object",properties:{action:{type:"string",enum:["add","remove"],description:"Whether to add a new suggestion or remove an existing one"},suggestion:{type:"string",description:"For 'add': The suggestion text to add. For 'remove': The suggestion ID to remove"},reason:{type:"string",description:"The reasoning behind adding or removing this suggestion"}},required:["action","suggestion"]}}},{type:"function",strict:!0,function:{name:"web_search",description:"Search the web for up-to-date information on a specific query. Use this when you need current information that might not be in your training data. You can use it to find best practices for planning projects for a specific topic, or to find information about a company or its business model.",parameters:{type:"object",properties:{query:{type:"string",description:"The search query to look up on the web"}},required:["query"],additionalProperties:!1}}}];function ae(o){let e=[];return o.forEach(n=>{var c,p;let s=n.function,t=n.id,a=!1;const u=z(n,U);if(u.valid||(console.warn(`Tool call validation failed for ${s.name}:`,u.errors),e.push({role:"tool",content:`Error: Tool call validation failed: ${u.errors.join(", ")}`,tool_call_id:t}),a=!0),!a){let r=JSON.parse(s.arguments),i;if(s.name==="update_project_charter"){if(I(S)||S.initialize(),S.updateField(r.field,r.value),r.is_assumption){const d=I(S).assumptions||[],l=`Assumed ${r.field}: ${JSON.stringify(r.value)}`;d.includes(l)||S.updateField("assumptions",[...d,l])}}else if(s.name==="operate_on_table"){switch(r.table_name){case"tasks":i=R;break;case"resources":i=D;break;default:console.warn("Undefined table_name was requested:",s.name,r),e.push({role:"tool",content:`Error: Undefined table_name was requested: ${r.table_name}`,tool_call_id:t}),a=!0;break}if(!a&&(r.operation==="add_rows"||r.operation==="delete_rows"||r.operation==="replace_rows"))try{const l=I(i).clone(),g=r.table_name==="tasks"?((p=(c=I(D))==null?void 0:c.getResourceNames)==null?void 0:p.call(c))||[]:null;switch(r.operation){case"add_rows":l.add_rows(r.content,r.after_id||null);break;case"delete_rows":l.delete_rows(r.ids);break;case"replace_rows":l.replace_rows(r.content);break}const m=l.getAllRows?l.getAllRows():[],k=Q(l),$={};r.table_name==="tasks"&&($.predecessors=X(m,l,k),$.resources=Z(m,g,k),$.estimates=ee(m,k),$.dates=te(m,k),$.progress=re(m,k));const T=[];Object.values($).forEach(h=>{h.valid||T.push(...h.errors)}),T.length>0?(console.warn(`Business validation failed for ${s.name}:`,T),e.push({role:"tool",content:`Error: Business validation failed: ${T.join(", ")}`,tool_call_id:t}),a=!0):i.update(h=>(h.setFrom(l),h))}catch(d){console.error(`Error during validation: ${d.message}`),e.push({role:"tool",content:`Error: Validation failed: ${d.message}`,tool_call_id:t}),a=!0}if(!a&&!["add_rows","delete_rows","replace_rows"].includes(r.operation))try{const d=(l,g)=>{console.log(`${l} operation:`,r),(l==="add_rows"||l==="replace_rows")&&console.log("Content:",JSON.stringify(r.content)),i.update(m=>{try{return g(m),m}catch(k){return console.warn(`Error in ${l}:`,k),e.push({role:"tool",content:`Error in ${l}: ${k.message}`,tool_call_id:t}),a=!0,m}})};switch(r.operation){case"add_rows":d("add_rows",l=>{l.add_rows(r.content,r.after_id||null)});break;case"replace_rows":d("replace_rows",l=>{l.replace_rows(r.content)});break;case"delete_rows":d("delete_rows",l=>{l.delete_rows(r.ids)});break;case"clear_table":d("clear_table",l=>{l.clear_table()});break;case"add_or_replace_columns":d("add_or_replace_columns",l=>{l.add_or_replace_columns(r.ids,r.content)});break;default:console.warn("Undefined tool operation was called:",s.name,r),e.push({role:"tool",content:`Error: Undefined operation: ${r.operation}`,tool_call_id:t}),a=!0}}catch(d){console.warn(`Error executing ${s.name}:`,d),e.push({role:"tool",content:`Error executing ${s.name}: ${d.message}`,tool_call_id:t}),a=!0}}else if(s.name==="rename_heading"){switch(r.table_name){case"tasks":i=R;break;case"resources":i=D;break;default:console.warn("Undefined table_name was requested:",s.name,r),e.push({role:"tool",content:`Error: Undefined table_name was requested: ${r.table_name}`,tool_call_id:t}),a=!0;break}if(!a)try{i.update(d=>{const g=d.getHeader().map(m=>m===r.old_heading?r.new_heading:m);return d.changeHeadings(g),d})}catch(d){console.warn("Error in rename_heading:",d),e.push({role:"tool",content:`Error in rename_heading: ${d.message}`,tool_call_id:t}),a=!0}}else if(s.name==="manage_suggestions")try{r.action==="add"?W(r.suggestion):r.action==="remove"?G(r.suggestion):(console.warn("Invalid suggestion action:",r.action),e.push({role:"tool",content:`Error: Invalid suggestion action: ${r.action}`,tool_call_id:t}),a=!0)}catch(d){console.warn("Error in manage_suggestions:",d),e.push({role:"tool",content:`Error in manage_suggestions: ${d.message}`,tool_call_id:t}),a=!0}else s.name==="web_search"?(console.log("Web search operation:",r.query),_.webSearch(r.query).then(d=>{v.update(l=>(l.push({role:"assistant",content:`Web search results for "${r.query}": ${d}`}),l))}).catch(d=>{console.warn("Error in web search:",d),v.update(l=>(l.push({role:"assistant",content:`Error performing web search: ${d.message}`}),l))})):(console.warn("Undefined tool function was called:",s.name),e.push({role:"tool",content:`Error: Undefined tool function: ${s.name}`,tool_call_id:t}),a=!0)}e.some(r=>r.tool_call_id===t)||e.push({role:"tool",content:"success",tool_call_id:t})}),e}async function K(o){var s,t;let e=null,n=0;for(;e==null&&n<10;){const a=I(S);let u=JSON.parse(JSON.stringify(o));a?u.push({role:"developer",content:`Project context from charter: ${JSON.stringify({name:a.projectName||"Not specified",description:a.projectDescription||"Not specified",manager:a.projectManager||"Not specified",startDate:a.startDate||"Not specified",endDate:a.endDate||"Not specified",objectives:(s=a.objectives)!=null&&s.length?a.objectives:["Not specified"],stakeholders:(t=a.stakeholders)!=null&&t.length?a.stakeholders:["Not specified"]})}`}):u.push({role:"developer",content:"No project charter information available."}),u.push({role:"developer",content:"Tables are represented in JSON (an Array containing rows, each row being an array itself with the columns as the fields). In the JSON representation, the first row contains the headings. However, when using the operate_on_table tool, the content parameter should NOT include the header row - only include the actual data rows."}),u.push({role:"developer",content:"When adding subtasks using the operate_on_table tool with the add_rows operation, always use the after_id parameter set to the parent task ID to ensure subtasks are added directly below their parent task."});let c=JSON.stringify(F);u.push({role:"developer",content:"About task table fields: Min, Likely and Max are estimated hours of effort to complete the task. Resources defines which resources can be used to complete the task. If multiple options exist, they can be separated by commas. If multiple resources are required together, an & can be used to connect them. The ampersand binds stronger than the comma. Do not summarize the resources, but use them as single values, because they are being used in other places of the program. Predecessors is a list of Ids separated by commas which must be left empty if none is pressent. Progress is a String between 0 and 100. When you add or remove tasks, also think about adjusting the dependencies of predecessor tasks and successors. It might not be obvious, but it is important."}),u.push({role:"developer",content:`The current task table:
`+c});let p=JSON.stringify(Y);u.push({role:"developer",content:"About resource table fields: The first column contains dates and every other column contains the available hours one resource can work for the project as a decimal number in a string. The columns are being managed by application automatically as tasks are being created which require specific resources. If you try to add columns directly, it will cause errors."}),u.push({role:"developer",content:`The current resource table:
`+p});let r=await _.sendToGPT(u,U);console.log("response",r),v.update(i=>(i.push(r.message),i)),r.message.tool_calls!==void 0&&r.message.tool_calls.length>0&&ae(r.message.tool_calls).forEach(d=>{v.update(l=>(l.push(d),l))}),n++,e=r.message.content}return e}f.record=async()=>{f.update(n=>({...n,isRecording:!0,status:"recording"})),await _.record(),f.update(n=>({...n,isRecording:!1,status:"transcribing"}));let o=await _.transcribe();v.update(n=>(n.push({role:"user",content:o}),n)),console.log("conversation:",P()),f.update(n=>({...n,isThinking:!0,status:"thinking"}));let e=await K(P());if(f.update(n=>({...n,isThinking:!1})),e!=null){console.log("GPT-Antwort:",e),f.update(s=>({...s,isSpeaking:!0,status:"speaking"}));let n=await _.speak(e);console.log("the promise looks like this:",n),f.update(s=>({...s,isSpeaking:!1,status:"idle"}))}else f.update(n=>({...n,status:"idle"}))};f.handleTextInput=async()=>{f.update(e=>({...e,isThinking:!0,status:"thinking"}));let o=await K(P());if(f.update(e=>({...e,isThinking:!1})),o!=null){console.log("GPT-Antwort:",o),f.update(n=>({...n,isSpeaking:!0,status:"speaking"}));let e=await _.speak(o);console.log("the promise looks like this:",e),f.update(n=>({...n,isSpeaking:!1,status:"idle"}))}else f.update(e=>({...e,status:"idle"}))};f.stop=()=>{_.stopRecording(),f.update(o=>({...o,isRecording:!1,isThinking:!1,isSpeaking:!1,status:"idle"}))};f.stopSpeaking=()=>{_.stopPlayback()};f.splitTask=async o=>{if(!o)throw console.error("No task ID provided for splitting"),new Error("No task ID provided for splitting");f.update(e=>({...e,isThinking:!0,status:"thinking"}));try{const e=I(R),n=e.getRow(o);if(!n||n.length===0){const t=new Error(`Task with ID ${o} not found`);throw v.update(a=>(a.push({role:"assistant",content:`I couldn't find task "${o}". Please check the ID and try again.`}),a)),t}const s=await _.splitTask(o,e);if(s&&s.length>0){console.log("Adding subtasks to the table:",s);try{return R.update(t=>(t.add_rows(s,o),t)),v.update(t=>(t.push({role:"assistant",content:`I've split task "${o}" into ${s.length} subtasks.`}),t)),s}catch(t){throw console.error("Error adding subtasks to the table:",t),v.update(a=>(a.push({role:"assistant",content:"I had trouble adding the subtasks to the table. Please try again."}),a)),new Error(`Failed to add subtasks to the table: ${t.message}`)}}else throw console.warn("No subtasks were generated"),v.update(t=>(t.push({role:"assistant",content:`I couldn't split task "${o}" into subtasks. Please try again.`}),t)),new Error("The assistant did not generate any subtasks")}catch(e){if(console.error("Error in splitTask:",e),!e.message.includes("Task with ID")&&!e.message.includes("Failed to add subtasks")&&!e.message.includes("did not generate any subtasks")){let n=e.message;n.includes("Failed to parse subtasks")?n="I couldn't understand the response format. Please try again.":n="I had trouble splitting that task. Please try again.",v.update(s=>(s.push({role:"assistant",content:n}),s))}throw e}finally{f.update(e=>({...e,isThinking:!1,status:"idle"}))}};oe.subscribe(o=>{_.setApiKey(o)});export{J as a,oe as b,v as c,f as d};
