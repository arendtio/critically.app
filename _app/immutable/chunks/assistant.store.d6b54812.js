import{w as p}from"./index.2391f01a.js";import{g}from"./tables.store.42dbbbd7.js";class _{constructor(){this.apiKey="",this.mediaRecorder=null,this.audioChunks=[]}setApiKey(e){console.log("new api key was set:",e),this.apiKey=e}async record(){if(this.apiKey=="")throw new Error("Api key not set");const e=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaRecorder=new MediaRecorder(e),this.mediaRecorder.ondataavailable=o=>{this.audioChunks.push(o.data)};let s=new Promise((o,i)=>{this.mediaRecorder.onstop=async()=>{o()}});return this.mediaRecorder.start(),s}async transcribe(){if(this.apiKey=="")throw new Error("Api key not set");const e=new Blob(this.audioChunks,{type:"audio/wav"}),s=new File([e],"recording.wav"),o=new FormData;o.append("file",s),o.append("model","whisper-1");const n=(await(await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`},body:o})).json()).text;return console.log("Transkribierter Text:",n),n}stop(){this.mediaRecorder&&(this.mediaRecorder.stop(),this.audioChunks=[])}async sendToGPT(e,s){if(this.apiKey=="")throw new Error("Api key not set");const o={model:"gpt-4o-mini",messages:e,tools:s};return(await(await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(o)})).json()).choices[0]}async speak(e){if(this.apiKey=="")throw new Error("Api key not set");const o=await(await fetch("https://api.openai.com/v1/audio/speech",{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({input:e,model:"tts-1",voice:"shimmer"})})).blob(),i=URL.createObjectURL(o);new Audio(i).play(),console.log("Audio wird abgespielt.")}async generateTasks(e,s){console.log("Starting generate Tasks");let o=JSON.stringify(s);e.push({role:"developer",content:`This is the current task table as JSON (Array containing the rows of the table, starting with the headings):
`+o}),e.push({role:"developer",content:"Update the given task table based on the information of the last messages of the conversation. The headings should be the same. Answer just with an JSON string without any other text. Your answer must be parsable with JSON.parse(), so not even Markdown code blocks should be included."});let i=await this.sendToGPT(e);return JSON.parse(i)}async generateRessources(e,s){}}var l=new _,T=10;const c=p(!1),k=p(),d=p([{role:"developer",content:"You are a helpful assistant for Project Management. Keep your answers very short. Make useful assumptions when something is undefined."},{role:"developer",content:"Use tools to plan the project. At least every "+(T-2)+" tool roundtrips you have to respond with a message to the user."},{role:"developer",content:"Dates must use the format YYYY-MM-DD."},{role:"developer",content:"Respond to the user in its prefered language. The browser tells us, that the user preferes the following language: "+(navigator.language||navigator.userLanguage)}]);let h=[];d.subscribe(r=>h=r);let m=g("tasks"),b;m.subscribe(r=>b=r);let w=g("resources"),f;w.subscribe(r=>f=r);const v=[{type:"function",function:{name:"operate_on_table",description:"",parameters:{type:"object",properties:{table_name:{type:"string",description:"Name of the table to be operated upon",enum:["tasks","resources"]},operation:{type:"string",description:"What operation should be performed on the table. For add_or_replace_row/add_or_replace_column, content must be an array of values for the entire row/column (including the id or heading). For change_headings, content must be an array of new headings (it must have the same length as the current headings).",enum:["add_or_replace_row","delete_row","clear_table","change_headings","add_or_replace_column"]},id:{type:"string",description:"Unique identifier of the row/column that should be affected by the operation. For add_or_replace_column, this is the column header name. If the operation is change_headings, this field is ignored."},content:{type:"string",description:"The content of one row/column of the table. It should be represented as a JSON-String containing an array of strings, which represent the columns/rows. So it must be parseable with JSON.parse in a single run. The columns are defined by the header of the existing table. In any case, it must contain complete rows/columns and include the id or heading respectively and match the number of columns/rows of the existing table. The first value of the array must be the id or heading. If the operation is change_headings, this field should contain the new headings as a JSON-String containing an array of strings."}}}}}];function S(r){let e=[];return r.forEach(s=>{let o=s.function,i=s.id,t=JSON.parse(o.arguments),n;switch(t.table_name){case"tasks":n=m;break;case"resources":n=w;break;default:throw console.error("Undefined table_name was requested:",o.name,t),new Error("Undefined table_name was requested.")}switch(t.operation){case"add_or_replace_row":console.log("operation",t.operation,t),n.update(a=>(console.log("Update t",a),a.add_or_replace_row(t.id,JSON.parse(t.content)),a));break;case"delete_row":console.log("operation",t.operation,t),n.update(a=>(console.log("Update t",a),a.delete_row(t.id),a));break;case"clear_table":console.log("operation",t.operation,t),n.update(a=>(console.log("Update t",a),a.clear_table(),a));break;case"change_headings":console.log("operation",t.operation,t),n.update(a=>(console.log("Update t",a),a.changeHeadings(JSON.parse(t.content)),a));break;case"add_or_replace_column":console.log("operation",t.operation,t),n.update(a=>(console.log("Update t",a),a.add_or_replace_column(t.id,JSON.parse(t.content)),a));break;default:throw new Error("Undefined tool operation was called:",o.name,t)}e.push({role:"tool",content:"",tool_call_id:i})}),e}async function O(r){let e=null,s=0;for(;e==null&&s<10;){let o=JSON.parse(JSON.stringify(r));o.push({role:"developer",content:"Tables are represented in JSON (an Array containing row, each row being an array itself with the columns as the fields). An empty Table always contains the first row with the headings. The first column consists of all the first fields of all the first rows."});let i=JSON.stringify(b);o.push({role:"developer",content:"About task table fields: Min, Likely and Max are estimated hours of effort to complete the task. Resources defines which resources can be used to complete the task. If multiple options exist, they can be separated by commas. If multiple resources are required together, an & can be used to connect them. The ampersand binds stringer than the comma. Predecessors is a list of Ids separated by commas which must be left empty if none is pressent. Progress is an integer between 0 and 100."}),o.push({role:"developer",content:`The current task table:
`+i});let t=JSON.stringify(f);o.push({role:"developer",content:"About resource table fields: The first column contains dates and every other column contains the available hours one ressource can work for the project."}),o.push({role:"developer",content:`The current resource table:
`+t});let n=await l.sendToGPT(o,v);console.log("response",n),d.update(a=>(a.push(n.message),a)),n.message.tool_calls!==void 0&&n.message.tool_calls.length>0&&S(n.message.tool_calls).forEach(y=>{d.update(u=>(u.push(y),u))}),s++,e=n.message.content}return e}c.record=async()=>{c.set(!0),await l.record(),c.set(!1);let r=await l.transcribe();d.update(s=>(s.push({role:"user",content:r}),s)),console.log("conversation:",h);let e=await O(h);e!=null&&(console.log("GPT-Antwort:",e),await l.speak(e))};c.stop=()=>{l.stop()};k.subscribe(r=>{l.setApiKey(r)});export{k as a,c as b,d as c};
